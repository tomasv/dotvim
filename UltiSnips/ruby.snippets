snippet re
require '${1}'
endsnippet

snippet cl
class ${1}
  ${2}
end
endsnippet

snippet mod
module ${1}
  ${2}
end
endsnippet

snippet utf
# encoding: UTF-8
endsnippet

snippet enc
# encoding: UTF-8
endsnippet

snippet each "" w
each { |${1:elem}| $0 }
endsnippet

snippet map "" w
map { |${1:elem}| $0 }
endsnippet

snippet des
describe '${1}' do
  $0
end
endsnippet

snippet desc
describe ${1:class_name} do
  $0
end
endsnippet

snippet it
it '${1:spec_name}' do
  $0
end
endsnippet

snippet spec
specify '${1}' do
  $0
end
endsnippet

snippet con
context '${1:message}' do
  $0
end
endsnippet

snippet bef
before do
  $0
end
endsnippet

snippet aft
after do
  ${1}
end${2}
endsnippet

snippet ex
expect { ${1} }.to${2}
endsnippet

snippet expany
expect_any_instance_of(${1}).to $0
endsnippet

snippet allany
allow_any_instance_of(${1}).to $0
endsnippet

snippet cr
create(:${1:factory})
endsnippet

snippet bu
build(:${1:factory})
endsnippet

snippet let
let(:${1:name}) { ${2} }
endsnippet

snippet let!
let!(:${1:name}) { ${2} }
endsnippet

global !p
def class_name_from_file():
    file_parts = snip.basename.split('_')
    capitalized_parts = [x.capitalize() for x in file_parts]
    class_name = ''.join(capitalized_parts)
    snip.rv = class_name
endglobal

snippet clsfor
class ${1:`!p class_name_from_file()`}
  def self.${2}(*args)
    new(*args).run
  end

  def initialize(${3})
    ${3/(\w+)(: \{.*\}|: ['"\/\w]+|:)?(, )?/@$1 = $1(?3:\\n    :)/g}
  end

  def run
    $0
  end

  private

  attr_reader ${3/(\w+)(: \{.*\}|: ['"\/\w]+|:)?/:$1/g}
end
endsnippet
